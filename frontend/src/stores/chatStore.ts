// src/stores/chatStore.ts

import { create } from 'zustand';
import chatApiService from '../lib/chatApi.service'; // Gi·∫£ s·ª≠ b·∫°n di chuy·ªÉn file service v√†o ƒë√¢y
import websocketService from '../lib/websocket.service'; // Gi·∫£ s·ª≠ b·∫°n di chuy·ªÉn file service v√†o ƒë√¢y
import type { Conversation, Message, User, TypingIndicator } from '../types/chat.types';



interface ChatState {
  currentUser: User | null;
  conversations: Conversation[];
  messagesByConversation: Record<number, Message[]>;
  activeConversationId: number | null;
  typingIndicators: TypingIndicator[];
  connected: boolean;
  loading: boolean;
  error: string | null;
}

interface ChatActions {
  setCurrentUser: (user: User) => void;
  connectWebSocket: (token: string) => void;
  loadConversations: () => Promise<void>;
  setActiveConversation: (conversationId: number) => Promise<void>;
  loadCurrentUser: () => Promise<void>;
  sendMessage: (content: string) => void;
  deleteMessage: (messageId: number) => Promise<void>;
  sendTypingIndicator: (isTyping: boolean) => void;
  setError: (error: string | null) => void;
}



export const useChatStore = create<ChatState & ChatActions>((set, get) => ({
  // ---- Initial State ----
  currentUser: null,
  conversations: [],
  messagesByConversation: {},
  activeConversationId: null,
  typingIndicators: [],
  connected: false,
  loading: false,
  error: null,


  // ---- Actions ----
  setCurrentUser: (user) => set({ currentUser: user }),
  setError: (error) => set({ error }),  

 loadCurrentUser: async () => {
    set({ loading: true, error: null });
    try {
      const result = await chatApiService.getCurrentUser(); 
      
      if (result.success && result.data) {
        set({ currentUser: result.data, loading: false }); 
      } else {
        // ‚≠êÔ∏è FIX: L·∫•y 'message' t·ª´ API n·∫øu 'error' kh√¥ng t·ªìn t·∫°i
        // API c·ªßa b·∫°n d∆∞·ªùng nh∆∞ d√πng 'message' ƒë·ªÉ b√°o l·ªói (d·ª±a theo v√≠ d·ª• getConversations)
        const errorMessage = (result as any).message || result.error || 'Failed to load current user';
        
        set({ 
          error: errorMessage, // D√πng errorMessage r√µ r√†ng h∆°n
          loading: false,
          currentUser: null // ƒê·∫£m b·∫£o User l√† null n·∫øu l·ªói
        });
        // ‚≠êÔ∏è FIX: Log l·ªói 'errorMessage'
        console.error("Failed to load user:", errorMessage); 
      }
    } catch (error) {
      set({ error: 'System error during user load', loading: false, currentUser: null });
      console.error("Load Current User FAILED:", error);
    }
  },

loadConversations: async () => {
    set({ loading: true, error: null });

    // ‚≠êÔ∏è FIX: L·∫•y currentUser T·ª™ TRONG STORE
    // Ch√∫ng ta c·∫ßn th√¥ng tin n√†y ƒë·ªÉ x√¢y d·ª±ng m·∫£ng 'participants'
    const currentUser = get().currentUser;

    // N·∫øu ch∆∞a load ƒë∆∞·ª£c user, kh√¥ng th·ªÉ x·ª≠ l√Ω conversation
    if (!currentUser) {
      set({ 
        error: 'Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c t·∫£i, kh√¥ng th·ªÉ t·∫£i cu·ªôc tr√≤ chuy·ªán.', 
        loading: false 
      });
      console.warn("loadConversations: B·ªè qua v√¨ currentUser l√† null.");
      return; 
    }

    try {
      const result = await chatApiService.getConversations();
      
      if (result.success && result.data) {
        let conversationsData: Conversation[] = [];

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng Ph√¢n trang (Page<T>)
        if (
          typeof result.data === 'object' && 
          'content' in result.data && 
          Array.isArray(result.data.content)
        ) {
          // D·ªØ li·ªáu th√¥ t·ª´ API (m·∫£ng c√°c conversation "ph·∫≥ng")
          const apiConversations: any[] = result.data.content;

          // T·∫°o participant cho ch√≠nh ng∆∞·ªùi d√πng hi·ªán t·∫°i
          // Component ConversationItem c·∫ßn ƒëi·ªÅu n√†y ƒë·ªÉ l·ªçc ra "ng∆∞·ªùi kia"
          const currentUserParticipant = {
            userId: currentUser.id,
            user: {
              id: currentUser.id,
              username: currentUser.username,
              fullName: currentUser.fullName,
              avatarUrl: currentUser.avatarUrl,
            },
          };

          // ‚≠êÔ∏è FIX: CHUY·ªÇN ƒê·ªîI D·ªÆ LI·ªÜU T·ª™ API
          // Bi·∫øn ƒë·ªïi m·∫£ng "ph·∫≥ng" th√†nh m·∫£ng c√≥ "participants"
          const transformedConversations: Conversation[] = apiConversations.map((apiConv) => {
            
            // B·∫Øt ƒë·∫ßu m·∫£ng participants v·ªõi user hi·ªán t·∫°i
            const participants = [currentUserParticipant];

            // Ch·ªâ th√™m "ng∆∞·ªùi kia" n·∫øu h·ªç t·ªìn t·∫°i
            if (apiConv.otherUserId) {
              participants.push({
                userId: apiConv.otherUserId,
                user: {
                  id: apiConv.otherUserId,
                  username: apiConv.otherUsername,
                  // Component d√πng 'fullName', nh∆∞ng API ch·ªâ c√≥ 'otherUsername'
                  // Ch√∫ng ta s·∫Ω √°nh x·∫° 'otherUsername' v√†o 'fullName'
                  fullName: apiConv.otherUsername || 'Ng∆∞·ªùi d√πng', 
                  avatarUrl: apiConv.otherUserAvatarUrl,
                }
              });
            }
            // (N·∫øu sau n√†y c√≥ group chat, logic ·ªü ƒë√¢y s·∫Ω ph·ª©c t·∫°p h∆°n)

            // Tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng Conversation ho√†n ch·ªânh
            return {
              id: apiConv.id,
              lastMessage: apiConv.lastMessage,
              updatedAt: apiConv.updatedAt,
              
              // ‚≠êÔ∏è FIX: Th√™m 'createdAt'
              // G√°n b·∫±ng 'updatedAt' v√¨ API kh√¥ng cung c·∫•p tr∆∞·ªùng 'createdAt' ri√™ng
              createdAt: apiConv.updatedAt, 

              unreadCount: apiConv.unreadCount || 0, 
              participants: participants, 
            };
          });
          
          conversationsData = transformedConversations;

        } else if (Array.isArray(result.data)) {
          // (Gi·ªØ l·∫°i logic c≈© ph√≤ng tr∆∞·ªùng h·ª£p API tr·∫£ v·ªÅ m·∫£ng tr·ª±c ti·∫øp)
          conversationsData = result.data;

        } else {
           set({ 
             error: 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch cu·ªôc tr√≤ chuy·ªán (D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá).', 
             loading: false 
           });
           return;
        }

        // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu ƒê√É ƒê∆Ø·ª¢C CHUY·ªÇN ƒê·ªîI
        set({ 
          conversations: conversationsData, 
          loading: false,
          activeConversationId: 
            get().activeConversationId || conversationsData[0]?.id || null, 
        });

      } else {
        set({ error: result.error || 'L·ªói t·∫£i cu·ªôc tr√≤ chuy·ªán.', loading: false });
      }
    } catch (error) {
      set({ error: 'L·ªói h·ªá th·ªëng khi t·∫£i cu·ªôc tr√≤ chuy·ªán.', loading: false });
    }
  },

 setActiveConversation: async (conversationId) => {
    set({ activeConversationId: conversationId, loading: true });
    const response = await chatApiService.getConversationMessages(conversationId);

    if (response.success && response.data) {
      const messagesPage = response.data;

      set((state) => ({ // <--- S·ª≠ d·ª•ng set t·ª´ Zustand
        // ‚úÖ Kh·∫Øc ph·ª•c l·ªói: ƒê·∫£m b·∫£o b·∫°n ƒëang tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng messagesByConversation m·ªõi
        messagesByConversation: { 
          ...state.messagesByConversation,
          [conversationId]: messagesPage.content.sort((a, b) => 
            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
          ),
        },
      }));
    } else {
      set({ error: 'Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn.' });
    }
    set({ loading: false });
},



sendMessage: (content: string) => {
  const { activeConversationId, conversations, currentUser } = get();
  
  if (!activeConversationId) {
    console.error('‚ùå No active conversation');
    set({ error: 'Ch∆∞a ch·ªçn cu·ªôc tr√≤ chuy·ªán' });
    return;
  }

  if (!currentUser) {
    console.error('‚ùå No current user');
    set({ error: 'Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c t·∫£i' });
    return;
  }

  // ‚≠ê T√åM CONVERSATION ƒê·ªÇ L·∫§Y RECIPIENT ID
  const activeConversation = conversations.find(c => c.id === activeConversationId);
  
  if (!activeConversation) {
    console.error('‚ùå Active conversation not found');
    set({ error: 'Kh√¥ng t√¨m th·∫•y cu·ªôc tr√≤ chuy·ªán' });
    return;
  }

  // ‚≠ê L·∫§Y RECIPIENT ID (ng∆∞·ªùi nh·∫≠n = ng∆∞·ªùi kia trong conversation)
  const recipientParticipant = activeConversation.participants.find(
    p => p.userId !== currentUser.id
  );

  if (!recipientParticipant) {
    console.error('‚ùå Recipient not found in conversation');
    set({ error: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi nh·∫≠n' });
    return;
  }

  const recipientId = recipientParticipant.userId;

  console.log('üì§ Sending message:');
  console.log('  - Conversation ID:', activeConversationId);
  console.log('  - Recipient ID:', recipientId);
  console.log('  - Content:', content);

  // ‚≠ê G·ª¨I V·ªöI RECIPIENT ID, KH√îNG PH·∫¢I CONVERSATION ID
  websocketService.sendMessage(recipientId, content);
},

sendTypingIndicator: (isTyping: boolean) => {
  const { activeConversationId, conversations, currentUser } = get();
  
  if (!activeConversationId || !currentUser) {
    return;
  }

  // T√¨m recipientId gi·ªëng nh∆∞ ·ªü tr√™n
  const activeConversation = conversations.find(c => c.id === activeConversationId);
  if (!activeConversation) return;

  const recipientParticipant = activeConversation.participants.find(
    p => p.userId !== currentUser.id
  );

  if (!recipientParticipant) return;

  websocketService.sendTypingIndicator(recipientParticipant.userId, isTyping);
},
  deleteMessage: async (messageId) => {
     const { activeConversationId } = get();
     if (!activeConversationId) return;

     const response = await chatApiService.deleteMessage(messageId);
     if (response.success) {
        set(state => ({
            messagesByConversation: {
                ...state.messagesByConversation,
                [activeConversationId]: state.messagesByConversation[activeConversationId].filter(msg => msg.id !== messageId)
            }
        }))
     } else {
        set({ error: 'Kh√¥ng th·ªÉ x√≥a tin nh·∫Øn.' });
     }
  },


connectWebSocket: (token) => {
  websocketService.connect(token).catch(err => {
    set({ error: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi m√°y ch·ªß chat." })
  });

  websocketService.onConnect(() => {
    console.log('üéâ WebSocket connection established in store');
    set({ connected: true });
  });

  websocketService.onDisconnect(() => {
    console.log('‚ùå WebSocket disconnected in store');
    set({ connected: false });
  });

  websocketService.onError((error) => {
    console.error('‚ùå WebSocket error in store:', error);
    set({ error });
  });

  // ‚≠ê QUAN TR·ªåNG: onMessage ph·∫£i x·ª≠ l√Ω ƒë√∫ng
  websocketService.onMessage((message) => {
    console.log('üì® MESSAGE RECEIVED IN STORE:', message);
    console.log('üì® Message details:', {
      id: message.id,
      conversationId: message.conversationId,
      senderId: message.senderId,
      content: message.content,
      createdAt: message.createdAt
    });
    
    set((state) => {
      const conversationId = message.conversationId;
      
      if (!conversationId) {
        console.error('‚ùå Message has no conversationId:', message);
        return state;
      }

      const existingMessages = state.messagesByConversation[conversationId] || [];
      
      // ‚≠ê Ki·ªÉm tra tr√πng l·∫∑p
      const isDuplicate = existingMessages.some(m => m.id === message.id);
      
      if (isDuplicate) {
        console.log('‚ö†Ô∏è Duplicate message ignored:', message.id);
        return state;
      }

      console.log('‚úÖ Adding new message to conversation:', conversationId);
      
      // ‚≠ê Th√™m message m·ªõi v√†o cu·ªëi m·∫£ng v√† s·∫Øp x·∫øp
      const updatedMessages = [...existingMessages, message].sort(
        (a, b) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
      );

      console.log('üìä Updated messages count:', updatedMessages.length);

      return {
        messagesByConversation: {
          ...state.messagesByConversation,
          [conversationId]: updatedMessages,
        },
        // ‚≠ê C·∫≠p nh·∫≠t lastMessage trong danh s√°ch conversations
        conversations: state.conversations.map(c => 
          c.id === conversationId 
            ? { 
                ...c, 
                lastMessage: message, 
                updatedAt: message.createdAt 
              } 
            : c
        ).sort((a, b) => 
          new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()
        )
      };
    });
  });

  websocketService.onTyping((typing) => {
    console.log('‚å®Ô∏è Typing indicator received:', typing);
    set((state) => ({
      typingIndicators: [
        ...state.typingIndicators.filter(t => t.userId !== typing.userId),
        typing,
      ],
    }));
  });
},
}));